#include <Blynk.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include <Servo.h>
#include <WiFi.h>
#include <WiFiClient.h>

char auth[] = "Token from Blynk app";
char ssid[] = "Your network name";
char pass[] = "Your network password";

static const int servoPin23 = 23;
Servo sorterServo;

Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);
#define SDAPIN 33
#define SCLPIN 26

int redCount = 0;
int greenCount = 0;
int blueCount = 0;

BLYNK_WRITE(V1) {
  redCount = param.asInt();
}
BLYNK_WRITE(V2) {
  greenCount = param.asInt();
}
BLYNK_WRITE(V3) {
  blueCount = param.asInt();
}


void setup() {

  Serial.begin(9600);

  Blynk.begin(auth, ssid, pass);
  
  Wire.begin(33, 26);

  pinMode(SDAPIN, INPUT);
  pinMode(SCLPIN, OUTPUT);

  sorterServo.attach(servoPin23);

  if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1); // halt!
  }
}

void loop() {
  
// RUN IoT (Wifi-conn. etc.)
 Blynk.run();


// READ THE VALUE

readValue();

// MOVE THE SORTER SERVO TO RIGHT POSITION

}
      //------------READ THE VALUE--------------
 void readValue() {
    
  float red, green, blue;
  int input = 0;
  
 
  delay(1000);  // takes 1000ms to read

  tcs.getRGB(&red, &green, &blue);
  
  Serial.print("R:\t"); Serial.print(int(red)); 
  Serial.print("\tG:\t"); Serial.print(int(green)); 
  Serial.print("\tB:\t"); Serial.print(int(blue));

  Serial.print("\n");
  
      if(red >= 90 && redCount > 0){
        input = 0;
        redCount -= 1;
      } else if(red >= 90 && redCount == 0) {
        input = 180;
      }
      if(green >= 90 && greenCount > 0){
        input = 0;
        greenCount -= 1;
      } else if(green >= 90 && greenCount == 0) {
        input = 180;
      }
      if(blue >= 79 && blueCount > 0){
        input = 0;
        blueCount -= 1;
      } else if(blue >= 79 && blueCount == 0) {
        input = 180;
     
      }
      if(red < 90 && green < 90 && blue < 79) {
        input = 90;
      }
     
      moveSorterServoToRightPosition(input);
    }


  //--------------MOVE SORTER SERVO TO RIGHT POSITION------------------

   void moveSorterServoToRightPosition(int input) {
      if(input == 0) {
        for(int posDegrees = 90; posDegrees >= input; posDegrees--) {
            sorterServo.write(posDegrees);
            delay(10);
        }
        
      } else {
        for(int posDegrees = 90; posDegrees <= input; posDegrees++) {
            sorterServo.write(posDegrees);
            delay(10);
        }
        
      }
    }
